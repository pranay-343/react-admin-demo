{"ast":null,"code":"import React, { useRef, useState, useMemo, useEffect, useContext, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDescendantsInit, DescendantProvider, useDescendant, createDescendantContext, useDescendants, useDescendantKeyDown } from '@reach/descendants';\nimport { forwardRefWithAs, useControlledSwitchWarning, makeId, useControlledState, noop, checkStyles, isFunction, isNumber, memoWithAs, useForkedRef, useUpdateEffect, useEventCallback, wrapEvent, createNamedContext, getElementComputedStyle, useIsomorphicLayoutEffect, boolOrBoolString, cloneValidElement } from '@reach/utils';\nimport { useId } from '@reach/auto-id';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar TabsDescendantsContext = /*#__PURE__*/createDescendantContext(\"TabsDescendantsContext\");\nvar TabPanelDescendantsContext = /*#__PURE__*/createDescendantContext(\"TabPanelDescendantsContext\");\nvar TabsContext = /*#__PURE__*/createNamedContext(\"TabsContext\", {});\nvar TabsKeyboardActivation;\n\n(function (TabsKeyboardActivation) {\n  TabsKeyboardActivation[\"Auto\"] = \"auto\";\n  TabsKeyboardActivation[\"Manual\"] = \"manual\";\n})(TabsKeyboardActivation || (TabsKeyboardActivation = {}));\n\nvar TabsOrientation;\n\n(function (TabsOrientation) {\n  TabsOrientation[\"Horizontal\"] = \"horizontal\";\n  TabsOrientation[\"Vertical\"] = \"vertical\";\n})(TabsOrientation || (TabsOrientation = {})); ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Tabs\r\n *\r\n * The parent component of the tab interface.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs\r\n */\n\n\nvar Tabs = /*#__PURE__*/forwardRefWithAs(function Tabs(_ref, ref) {\n  var _props$id;\n\n  var _ref$as = _ref.as,\n      Comp = _ref$as === void 0 ? \"div\" : _ref$as,\n      children = _ref.children,\n      defaultIndex = _ref.defaultIndex,\n      _ref$orientation = _ref.orientation,\n      orientation = _ref$orientation === void 0 ? TabsOrientation.Horizontal : _ref$orientation,\n      _ref$index = _ref.index,\n      controlledIndex = _ref$index === void 0 ? undefined : _ref$index,\n      _ref$keyboardActivati = _ref.keyboardActivation,\n      keyboardActivation = _ref$keyboardActivati === void 0 ? TabsKeyboardActivation.Auto : _ref$keyboardActivati,\n      onChange = _ref.onChange,\n      _ref$readOnly = _ref.readOnly,\n      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"children\", \"defaultIndex\", \"orientation\", \"index\", \"keyboardActivation\", \"onChange\", \"readOnly\"]);\n\n  var isControlled = useRef(controlledIndex != null);\n  useControlledSwitchWarning(controlledIndex, \"index\", \"Tabs\");\n\n  var _id = useId(props.id);\n\n  var id = (_props$id = props.id) !== null && _props$id !== void 0 ? _props$id : makeId(\"tabs\", _id); // We only manage focus if the user caused the update vs. a new controlled\n  // index coming in.\n\n  var userInteractedRef = useRef(false);\n  var selectedPanelRef = useRef(null);\n  var isRTL = useRef(false);\n\n  var _useControlledState = useControlledState(controlledIndex, defaultIndex !== null && defaultIndex !== void 0 ? defaultIndex : 0),\n      selectedIndex = _useControlledState[0],\n      setSelectedIndex = _useControlledState[1];\n\n  var _useState = useState(-1),\n      focusedIndex = _useState[0],\n      setFocusedIndex = _useState[1];\n\n  var _useDescendantsInit = useDescendantsInit(),\n      tabs = _useDescendantsInit[0],\n      setTabs = _useDescendantsInit[1];\n\n  var context = useMemo(function () {\n    return {\n      focusedIndex: focusedIndex,\n      id: id,\n      isControlled: isControlled.current,\n      isRTL: isRTL,\n      keyboardActivation: keyboardActivation,\n      onFocusPanel: function onFocusPanel() {\n        var _selectedPanelRef$cur;\n\n        (_selectedPanelRef$cur = selectedPanelRef.current) === null || _selectedPanelRef$cur === void 0 ? void 0 : _selectedPanelRef$cur.focus();\n      },\n      onSelectTab: readOnly ? noop : function (index) {\n        userInteractedRef.current = true;\n        onChange && onChange(index);\n        setSelectedIndex(index);\n      },\n      onSelectTabWithKeyboard: readOnly ? noop : function (index) {\n        var _tabs$index$element;\n\n        userInteractedRef.current = true;\n\n        switch (keyboardActivation) {\n          case TabsKeyboardActivation.Manual:\n            (_tabs$index$element = tabs[index].element) === null || _tabs$index$element === void 0 ? void 0 : _tabs$index$element.focus();\n            return;\n\n          case TabsKeyboardActivation.Auto:\n          default:\n            onChange && onChange(index);\n            setSelectedIndex(index);\n            return;\n        }\n      },\n      orientation: orientation,\n      selectedIndex: selectedIndex,\n      selectedPanelRef: selectedPanelRef,\n      setFocusedIndex: setFocusedIndex,\n      setSelectedIndex: setSelectedIndex,\n      userInteractedRef: userInteractedRef\n    };\n  }, [focusedIndex, id, keyboardActivation, onChange, orientation, readOnly, selectedIndex, setSelectedIndex, tabs]);\n  useEffect(function () {\n    return checkStyles(\"tabs\");\n  }, []);\n  return React.createElement(DescendantProvider, {\n    context: TabsDescendantsContext,\n    items: tabs,\n    set: setTabs\n  }, React.createElement(TabsContext.Provider, {\n    value: context\n  }, React.createElement(Comp, Object.assign({}, props, {\n    ref: ref,\n    \"data-reach-tabs\": \"\",\n    \"data-orientation\": orientation,\n    id: props.id\n  }), isFunction(children) ? children({\n    focusedIndex: focusedIndex,\n    id: id,\n    selectedIndex: selectedIndex\n  }) : children)));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  Tabs.displayName = \"Tabs\";\n  Tabs.propTypes = {\n    children: PropTypes.node.isRequired,\n    onChange: PropTypes.func,\n    orientation: /*#__PURE__*/PropTypes.oneOf( /*#__PURE__*/Object.values(TabsOrientation)),\n    index: function index(props, name, compName, location, propName) {\n      var val = props[name];\n\n      if (props.index > -1 && props.onChange == null && props.readOnly !== true) {\n        return new Error(\"You provided a value prop to `\" + compName + \"` without an `onChange` handler. This will render a read-only tabs element. If the tabs should be mutable use `defaultIndex`. Otherwise, set `onChange`.\");\n      } else if (val != null && !isNumber(val)) {\n        return new Error(\"Invalid prop `\" + propName + \"` supplied to `\" + compName + \"`. Expected `number`, received `\" + (Array.isArray(val) ? \"array\" : typeof val) + \"`.\");\n      }\n\n      return null;\n    },\n    defaultIndex: PropTypes.number\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * TabList\r\n *\r\n * The parent component of the tabs.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist\r\n */\n\n\nvar TabListImpl = /*#__PURE__*/forwardRefWithAs(function TabList(_ref2, forwardedRef) {\n  var children = _ref2.children,\n      _ref2$as = _ref2.as,\n      Comp = _ref2$as === void 0 ? \"div\" : _ref2$as,\n      onKeyDown = _ref2.onKeyDown,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"children\", \"as\", \"onKeyDown\"]);\n\n  var _useContext = useContext(TabsContext),\n      focusedIndex = _useContext.focusedIndex,\n      isControlled = _useContext.isControlled,\n      isRTL = _useContext.isRTL,\n      keyboardActivation = _useContext.keyboardActivation,\n      onSelectTabWithKeyboard = _useContext.onSelectTabWithKeyboard,\n      orientation = _useContext.orientation,\n      selectedIndex = _useContext.selectedIndex,\n      setSelectedIndex = _useContext.setSelectedIndex;\n\n  var tabs = useDescendants(TabsDescendantsContext);\n  var ownRef = useRef(null);\n  var ref = useForkedRef(forwardedRef, ownRef);\n  useEffect(function () {\n    if (ownRef.current && (ownRef.current.ownerDocument && ownRef.current.ownerDocument.dir === \"rtl\" || getElementComputedStyle(ownRef.current, \"direction\") === \"rtl\")) {\n      isRTL.current = true;\n    }\n  }, [isRTL]);\n  var handleKeyDown = useEventCallback(wrapEvent(onKeyDown, useDescendantKeyDown(TabsDescendantsContext, {\n    currentIndex: keyboardActivation === TabsKeyboardActivation.Manual ? focusedIndex : selectedIndex,\n    orientation: orientation,\n    rotate: true,\n    callback: onSelectTabWithKeyboard,\n    filter: function filter(tab) {\n      return !tab.disabled;\n    },\n    rtl: isRTL.current\n  })));\n  useIsomorphicLayoutEffect(function () {\n    var _tabs$selectedIndex; // In the event an uncontrolled component's selected index is disabled,\n    // (this should only happen if the first tab is disabled and no default\n    // index is set), we need to override the selection to the next selectable\n    // index value.\n\n\n    if (!isControlled && boolOrBoolString((_tabs$selectedIndex = tabs[selectedIndex]) === null || _tabs$selectedIndex === void 0 ? void 0 : _tabs$selectedIndex.disabled)) {\n      var next = tabs.find(function (tab) {\n        return !tab.disabled;\n      });\n\n      if (next) {\n        setSelectedIndex(next.index);\n      }\n    }\n  }, [tabs, isControlled, selectedIndex, setSelectedIndex]);\n  return React.createElement(Comp // The element that serves as the container for the set of tabs has role\n  // `tablist`\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n  , Object.assign({\n    // The element that serves as the container for the set of tabs has role\n    // `tablist`\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n    role: \"tablist\",\n    \"aria-orientation\": orientation\n  }, props, {\n    \"data-reach-tab-list\": \"\",\n    ref: ref,\n    onKeyDown: handleKeyDown\n  }), Children.map(children, function (child, index) {\n    // TODO: Remove in 1.0\n    return cloneValidElement(child, {\n      isSelected: index === selectedIndex\n    });\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  TabListImpl.displayName = \"TabList\";\n  TabListImpl.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node\n  };\n}\n\nvar TabList = /*#__PURE__*/memoWithAs(TabListImpl);\n\nif (process.env.NODE_ENV !== \"production\") {\n  TabList.displayName = \"TabList\";\n}\n/**\r\n * Tab\r\n *\r\n * The interactive element that changes the selected panel.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab\r\n */\n\n\nvar Tab = /*#__PURE__*/forwardRefWithAs(function Tab(_ref3, forwardedRef) {\n  var children = _ref3.children,\n      _ = _ref3.isSelected,\n      _ref3$as = _ref3.as,\n      Comp = _ref3$as === void 0 ? \"button\" : _ref3$as,\n      indexProp = _ref3.index,\n      disabled = _ref3.disabled,\n      onBlur = _ref3.onBlur,\n      onFocus = _ref3.onFocus,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"children\", \"isSelected\", \"as\", \"index\", \"disabled\", \"onBlur\", \"onFocus\"]);\n\n  var _useContext2 = useContext(TabsContext),\n      tabsId = _useContext2.id,\n      onSelectTab = _useContext2.onSelectTab,\n      orientation = _useContext2.orientation,\n      selectedIndex = _useContext2.selectedIndex,\n      userInteractedRef = _useContext2.userInteractedRef,\n      setFocusedIndex = _useContext2.setFocusedIndex;\n\n  var ownRef = useRef(null);\n  var ref = useForkedRef(forwardedRef, ownRef);\n  var index = useDescendant({\n    element: ownRef.current,\n    disabled: !!disabled\n  }, TabsDescendantsContext, indexProp);\n  var htmlType = Comp === \"button\" && props.type == null ? \"button\" : props.type;\n  var isSelected = index === selectedIndex;\n\n  function onSelect() {\n    onSelectTab(index);\n  }\n\n  useUpdateEffect(function () {\n    if (isSelected && ownRef.current && userInteractedRef.current) {\n      userInteractedRef.current = false;\n      ownRef.current.focus();\n    }\n  }, [isSelected, userInteractedRef]);\n  var handleFocus = useEventCallback(wrapEvent(onFocus, function () {\n    setFocusedIndex(index);\n  }));\n  var handleBlur = useEventCallback(wrapEvent(onFocus, function () {\n    setFocusedIndex(-1);\n  }));\n  return React.createElement(Comp // Each element with role `tab` has the property `aria-controls` referring\n  // to its associated `tabpanel` element.\n  // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n  , Object.assign({\n    \"aria-controls\": makeId(tabsId, \"panel\", index),\n    \"aria-disabled\": disabled,\n    \"aria-selected\": isSelected,\n    // Each element that serves as a tab has role `tab` and is contained\n    // within the element with role `tablist`.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1\n  }, props, {\n    ref: ref,\n    \"data-reach-tab\": \"\",\n    \"data-orientation\": orientation,\n    \"data-selected\": isSelected ? \"\" : undefined,\n    disabled: disabled,\n    id: makeId(tabsId, \"tab\", index),\n    onClick: onSelect,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    type: htmlType\n  }), children);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  Tab.displayName = \"Tab\";\n  Tab.propTypes = {\n    children: PropTypes.node,\n    disabled: PropTypes.bool\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * TabPanels\r\n *\r\n * The parent component of the panels.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels\r\n */\n\n\nvar TabPanelsImpl = /*#__PURE__*/forwardRefWithAs(function TabPanels(_ref4, forwardedRef) {\n  var children = _ref4.children,\n      _ref4$as = _ref4.as,\n      Comp = _ref4$as === void 0 ? \"div\" : _ref4$as,\n      props = _objectWithoutPropertiesLoose(_ref4, [\"children\", \"as\"]);\n\n  var ownRef = useRef();\n  var ref = useForkedRef(ownRef, forwardedRef);\n\n  var _useDescendantsInit2 = useDescendantsInit(),\n      tabPanels = _useDescendantsInit2[0],\n      setTabPanels = _useDescendantsInit2[1];\n\n  return React.createElement(DescendantProvider, {\n    context: TabPanelDescendantsContext,\n    items: tabPanels,\n    set: setTabPanels\n  }, React.createElement(Comp, Object.assign({}, props, {\n    ref: ref,\n    \"data-reach-tab-panels\": \"\"\n  }), children));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  TabPanelsImpl.displayName = \"TabPanels\";\n  TabPanelsImpl.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node\n  };\n}\n\nvar TabPanels = /*#__PURE__*/memoWithAs(TabPanelsImpl);\n\nif (process.env.NODE_ENV !== \"production\") {\n  TabPanels.displayName = \"TabPanels\";\n}\n/**\r\n * TabPanel\r\n *\r\n * The panel that displays when it's corresponding tab is active.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel\r\n */\n\n\nvar TabPanel = /*#__PURE__*/forwardRefWithAs(function TabPanel(_ref5, forwardedRef) {\n  var children = _ref5.children,\n      ariaLabel = _ref5[\"aria-label\"],\n      _ref5$as = _ref5.as,\n      Comp = _ref5$as === void 0 ? \"div\" : _ref5$as,\n      props = _objectWithoutPropertiesLoose(_ref5, [\"children\", \"aria-label\", \"as\"]);\n\n  var _useContext3 = useContext(TabsContext),\n      selectedPanelRef = _useContext3.selectedPanelRef,\n      selectedIndex = _useContext3.selectedIndex,\n      tabsId = _useContext3.id;\n\n  var ownRef = useRef(null);\n  var index = useDescendant({\n    element: ownRef.current\n  }, TabPanelDescendantsContext);\n  var id = makeId(tabsId, \"panel\", index); // Because useDescendant will always return -1 on the first render,\n  // `isSelected` will briefly be false for all tabs. We set a tab panel's\n  // hidden attribute based `isSelected` being false, meaning that all tabs\n  // are initially hidden. This makes it impossible for consumers to do\n  // certain things, like focus an element inside the active tab panel when\n  // the page loads. So what we can do is track that a panel is \"ready\" to be\n  // hidden once effects are run (descendants work their magic in\n  // useLayoutEffect, so we can set our ref in useEffecct to run later). We\n  // can use a ref instead of state because we're always geting a re-render\n  // anyway thanks to descendants. This is a little more coupled to the\n  // implementation details of descendants than I'd like, but we'll add a test\n  // to (hopefully) catch any regressions.\n\n  var isSelected = index === selectedIndex;\n  var readyToHide = useRef(false);\n  var hidden = readyToHide.current ? !isSelected : false;\n  React.useEffect(function () {\n    readyToHide.current = true;\n  }, []);\n  var ref = useForkedRef(forwardedRef, ownRef, isSelected ? selectedPanelRef : null);\n  return React.createElement(Comp // Each element with role `tabpanel` has the property `aria-labelledby`\n  // referring to its associated tab element.\n  , Object.assign({\n    \"aria-labelledby\": makeId(tabsId, \"tab\", index),\n    hidden: hidden,\n    // Each element that contains the content panel for a tab has role\n    // `tabpanel`.\n    // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n    role: \"tabpanel\",\n    tabIndex: isSelected ? 0 : -1\n  }, props, {\n    ref: ref,\n    \"data-reach-tab-panel\": \"\",\n    id: id\n  }), children);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  TabPanel.displayName = \"TabPanel\";\n  TabPanel.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node\n  };\n} ////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * A hook that exposes data for a given `Tabs` component to its descendants.\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/tabs#usetabscontext\r\n */\n\n\nfunction useTabsContext() {\n  var _useContext4 = useContext(TabsContext),\n      focusedIndex = _useContext4.focusedIndex,\n      id = _useContext4.id,\n      selectedIndex = _useContext4.selectedIndex;\n\n  return useMemo(function () {\n    return {\n      focusedIndex: focusedIndex,\n      id: id,\n      selectedIndex: selectedIndex\n    };\n  }, [focusedIndex, id, selectedIndex]);\n}\n\nexport { Tab, TabList, TabPanel, TabPanels, Tabs, TabsKeyboardActivation, TabsOrientation, useTabsContext };","map":{"version":3,"sources":["../src/index.tsx"],"names":["TabsDescendantsContext","createDescendantContext","TabPanelDescendantsContext","TabsContext","createNamedContext","TabsKeyboardActivation","TabsOrientation","Tabs","forwardRefWithAs","as","Comp","children","defaultIndex","orientation","Horizontal","index","controlledIndex","undefined","keyboardActivation","Auto","onChange","readOnly","props","isControlled","useRef","useControlledSwitchWarning","_id","useId","id","makeId","userInteractedRef","selectedPanelRef","isRTL","selectedIndex","setSelectedIndex","useControlledState","focusedIndex","setFocusedIndex","useState","tabs","setTabs","useDescendantsInit","context","useMemo","onFocusPanel","onSelectTab","onSelectTabWithKeyboard","useEffect","checkStyles","items","set","value","ref","PropTypes","Object","val","isNumber","Array","number","TabListImpl","onKeyDown","useContext","useDescendants","ownRef","useForkedRef","getElementComputedStyle","handleKeyDown","useEventCallback","wrapEvent","useDescendantKeyDown","currentIndex","rotate","callback","filter","tab","rtl","current","useIsomorphicLayoutEffect","boolOrBoolString","next","role","cloneValidElement","isSelected","node","TabList","memoWithAs","Tab","_","indexProp","disabled","onBlur","onFocus","tabsId","useDescendant","element","htmlType","useUpdateEffect","handleFocus","handleBlur","tabIndex","onClick","onSelect","type","bool","TabPanelsImpl","tabPanels","setTabPanels","TabPanels","TabPanel","ariaLabel","readyToHide","hidden","React","useTabsContext"],"mappings":"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","sourcesContent":["/**\n * Welcome to @reach/tabs!\n *\n * An accessible tabs component.\n *\n * The `Tab` and `TabPanel` elements are associated by their order in the tree.\n * None of the components are empty wrappers, each is associated with a real DOM\n * element in the document, giving you maximum control over styling and composition.\n *\n * You can render any other elements you want inside of `Tabs`, but `TabList`\n * should only render `Tab` elements, and `TabPanels` should only render\n * `TabPanel` elements.\n *\n * @see Docs     https://reacttraining.com/reach-ui/tabs\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/tabs\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n */\n\nimport React, {\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Children,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  createDescendantContext,\n  Descendant,\n  DescendantProvider,\n  useDescendant,\n  useDescendantKeyDown,\n  useDescendantsInit,\n  useDescendants,\n} from \"@reach/descendants\";\nimport {\n  boolOrBoolString,\n  checkStyles,\n  cloneValidElement,\n  createNamedContext,\n  forwardRefWithAs,\n  getElementComputedStyle,\n  isNumber,\n  isFunction,\n  makeId,\n  memoWithAs,\n  noop,\n  useControlledSwitchWarning,\n  useControlledState,\n  useEventCallback,\n  useForkedRef,\n  useIsomorphicLayoutEffect,\n  useUpdateEffect,\n  wrapEvent,\n} from \"@reach/utils\";\nimport { useId } from \"@reach/auto-id\";\n\nconst TabsDescendantsContext = createDescendantContext<TabDescendant>(\n  \"TabsDescendantsContext\"\n);\n\nconst TabPanelDescendantsContext = createDescendantContext<TabPanelDescendant>(\n  \"TabPanelDescendantsContext\"\n);\nconst TabsContext = createNamedContext(\n  \"TabsContext\",\n  {} as InternalTabsContextValue\n);\n\nexport enum TabsKeyboardActivation {\n  Auto = \"auto\",\n  Manual = \"manual\",\n}\n\nexport enum TabsOrientation {\n  Horizontal = \"horizontal\",\n  Vertical = \"vertical\",\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tabs\n *\n * The parent component of the tab interface.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs\n */\nexport const Tabs = forwardRefWithAs<TabsProps, \"div\">(function Tabs(\n  {\n    as: Comp = \"div\",\n    children,\n    defaultIndex,\n    orientation = TabsOrientation.Horizontal,\n    index: controlledIndex = undefined,\n    keyboardActivation = TabsKeyboardActivation.Auto,\n    onChange,\n    readOnly = false,\n    ...props\n  },\n  ref\n) {\n  let isControlled = useRef(controlledIndex != null);\n  useControlledSwitchWarning(controlledIndex, \"index\", \"Tabs\");\n\n  let _id = useId(props.id);\n  let id = props.id ?? makeId(\"tabs\", _id);\n\n  // We only manage focus if the user caused the update vs. a new controlled\n  // index coming in.\n  let userInteractedRef = useRef(false);\n\n  let selectedPanelRef = useRef<HTMLElement | null>(null);\n\n  let isRTL = useRef(false);\n\n  let [selectedIndex, setSelectedIndex] = useControlledState(\n    controlledIndex,\n    defaultIndex ?? 0\n  );\n\n  let [focusedIndex, setFocusedIndex] = useState(-1);\n\n  let [tabs, setTabs] = useDescendantsInit<TabDescendant>();\n\n  let context: InternalTabsContextValue = useMemo(() => {\n    return {\n      focusedIndex,\n      id,\n      isControlled: isControlled.current,\n      isRTL,\n      keyboardActivation,\n      onFocusPanel() {\n        selectedPanelRef.current?.focus();\n      },\n      onSelectTab: readOnly\n        ? noop\n        : (index: number) => {\n            userInteractedRef.current = true;\n            onChange && onChange(index);\n            setSelectedIndex(index);\n          },\n      onSelectTabWithKeyboard: readOnly\n        ? noop\n        : (index: number) => {\n            userInteractedRef.current = true;\n            switch (keyboardActivation) {\n              case TabsKeyboardActivation.Manual:\n                tabs[index].element?.focus();\n                return;\n              case TabsKeyboardActivation.Auto:\n              default:\n                onChange && onChange(index);\n                setSelectedIndex(index);\n                return;\n            }\n          },\n      orientation,\n      selectedIndex,\n      selectedPanelRef,\n      setFocusedIndex,\n      setSelectedIndex,\n      userInteractedRef,\n    };\n  }, [\n    focusedIndex,\n    id,\n    keyboardActivation,\n    onChange,\n    orientation,\n    readOnly,\n    selectedIndex,\n    setSelectedIndex,\n    tabs,\n  ]);\n\n  useEffect(() => checkStyles(\"tabs\"), []);\n\n  return (\n    <DescendantProvider\n      context={TabsDescendantsContext}\n      items={tabs}\n      set={setTabs}\n    >\n      <TabsContext.Provider value={context}>\n        <Comp\n          {...props}\n          ref={ref}\n          data-reach-tabs=\"\"\n          data-orientation={orientation}\n          id={props.id}\n        >\n          {isFunction(children)\n            ? children({ focusedIndex, id, selectedIndex })\n            : children}\n        </Comp>\n      </TabsContext.Provider>\n    </DescendantProvider>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-props\n */\nexport type TabsProps = {\n  /**\n   * Tabs expects `<TabList>` and `<TabPanels>` as children. The order doesn't\n   * matter, you can have tabs on the top or the bottom. In fact, you could have\n   * tabs on both the bottom and the top at the same time. You can have random\n   * elements inside as well.\n   *\n   * You can also pass a render function to access data relevant to nested\n   * components.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-children\n   */\n  children: React.ReactNode | ((props: TabsContextValue) => React.ReactNode);\n  /**\n   * Like form inputs, a tab's state can be controlled by the owner. Make sure\n   * to include an `onChange` as well, or else the tabs will not be interactive.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-index\n   */\n  index?: number;\n  /**\n   * Describes the activation mode when navigating a tablist with a keyboard.\n   * When set to `\"auto\"`, a tab panel is activated automatically when a tab is\n   * highlighted using arrow keys. When set to `\"manual\"`, the user must\n   * activate the tab panel with either the `Spacebar` or `Enter` keys. Defaults\n   * to `\"auto\"`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-keyboardactivation\n   */\n  keyboardActivation?: TabsKeyboardActivation;\n  /**\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-readonly\n   */\n  readOnly?: boolean;\n  /**\n   * Starts the tabs at a specific index.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-defaultindex\n   */\n  defaultIndex?: number;\n  /**\n   * Allows you to switch the orientation of the tabs relative to their tab\n   * panels. This value can either be `\"horizontal\"`\n   * (`TabsOrientation.Horizontal`) or `\"vertical\"`\n   * (`TabsOrientation.Vertical`). Defaults to `\"horizontal\"`.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-orientation\n   * @see MDN  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties\n   */\n  orientation?: TabsOrientation;\n  /**\n   * Calls back with the tab index whenever the user changes tabs, allowing your\n   * app to synchronize with it.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabs-onchange\n   */\n  onChange?: (index: number) => void;\n};\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\";\n  Tabs.propTypes = {\n    children: PropTypes.node.isRequired,\n    onChange: PropTypes.func,\n    orientation: PropTypes.oneOf(Object.values(TabsOrientation)),\n    index: (props, name, compName, location, propName) => {\n      let val = props[name];\n      if (\n        props.index > -1 &&\n        props.onChange == null &&\n        props.readOnly !== true\n      ) {\n        return new Error(\n          \"You provided a value prop to `\" +\n            compName +\n            \"` without an `onChange` handler. This will render a read-only tabs element. If the tabs should be mutable use `defaultIndex`. Otherwise, set `onChange`.\"\n        );\n      } else if (val != null && !isNumber(val)) {\n        return new Error(\n          `Invalid prop \\`${propName}\\` supplied to \\`${compName}\\`. Expected \\`number\\`, received \\`${\n            Array.isArray(val) ? \"array\" : typeof val\n          }\\`.`\n        );\n      }\n      return null;\n    },\n    defaultIndex: PropTypes.number,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabList\n *\n * The parent component of the tabs.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist\n */\nconst TabListImpl = forwardRefWithAs<TabListProps, \"div\">(function TabList(\n  { children, as: Comp = \"div\", onKeyDown, ...props },\n  forwardedRef\n) {\n  const {\n    focusedIndex,\n    isControlled,\n    isRTL,\n    keyboardActivation,\n    onSelectTabWithKeyboard,\n    orientation,\n    selectedIndex,\n    setSelectedIndex,\n  } = useContext(TabsContext);\n  let tabs = useDescendants(TabsDescendantsContext);\n\n  let ownRef = useRef<HTMLElement | null>(null);\n  let ref = useForkedRef(forwardedRef, ownRef);\n\n  useEffect(() => {\n    if (\n      ownRef.current &&\n      ((ownRef.current.ownerDocument &&\n        ownRef.current.ownerDocument.dir === \"rtl\") ||\n        getElementComputedStyle(ownRef.current, \"direction\") === \"rtl\")\n    ) {\n      isRTL.current = true;\n    }\n  }, [isRTL]);\n\n  let handleKeyDown = useEventCallback(\n    wrapEvent(\n      onKeyDown,\n      useDescendantKeyDown(TabsDescendantsContext, {\n        currentIndex:\n          keyboardActivation === TabsKeyboardActivation.Manual\n            ? focusedIndex\n            : selectedIndex,\n        orientation,\n        rotate: true,\n        callback: onSelectTabWithKeyboard,\n        filter: (tab) => !tab.disabled,\n        rtl: isRTL.current,\n      })\n    )\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    // In the event an uncontrolled component's selected index is disabled,\n    // (this should only happen if the first tab is disabled and no default\n    // index is set), we need to override the selection to the next selectable\n    // index value.\n    if (!isControlled && boolOrBoolString(tabs[selectedIndex]?.disabled)) {\n      let next = tabs.find((tab) => !tab.disabled);\n      if (next) {\n        setSelectedIndex(next.index);\n      }\n    }\n  }, [tabs, isControlled, selectedIndex, setSelectedIndex]);\n\n  return (\n    <Comp\n      // The element that serves as the container for the set of tabs has role\n      // `tablist`\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tablist\"\n      // If the `tablist` element is vertically oriented, it has the property\n      // `aria-orientation` set to `\"vertical\"`. The default value of\n      // `aria-orientation` for a tablist element is `\"horizontal\"`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-orientation={orientation}\n      {...props}\n      data-reach-tab-list=\"\"\n      ref={ref}\n      onKeyDown={handleKeyDown}\n    >\n      {Children.map(children, (child, index) => {\n        // TODO: Remove in 1.0\n        return cloneValidElement(child, {\n          isSelected: index === selectedIndex,\n        });\n      })}\n    </Comp>\n  );\n});\n\nif (__DEV__) {\n  TabListImpl.displayName = \"TabList\";\n  TabListImpl.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\nconst TabList = memoWithAs(TabListImpl);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tablist-props\n */\nexport type TabListProps = {\n  /**\n   * `TabList` expects multiple `Tab` elements as children.\n   *\n   * `TabPanels` expects multiple `TabPanel` elements as children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tablist-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\";\n}\n\nexport { TabList };\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Tab\n *\n * The interactive element that changes the selected panel.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab\n */\nexport const Tab = forwardRefWithAs<\n  // TODO: Remove this when cloneElement is removed\n  TabProps & { isSelected?: boolean },\n  \"button\"\n>(function Tab(\n  {\n    children,\n    isSelected: _,\n    as: Comp = \"button\",\n    index: indexProp,\n    disabled,\n    onBlur,\n    onFocus,\n    ...props\n  },\n  forwardedRef\n) {\n  const {\n    id: tabsId,\n    onSelectTab,\n    orientation,\n    selectedIndex,\n    userInteractedRef,\n    setFocusedIndex,\n  } = useContext(TabsContext);\n  const ownRef = useRef<HTMLElement | null>(null);\n  const ref = useForkedRef(forwardedRef, ownRef);\n  const index = useDescendant(\n    {\n      element: ownRef.current!,\n      disabled: !!disabled,\n    },\n    TabsDescendantsContext,\n    indexProp\n  );\n  const htmlType =\n    Comp === \"button\" && props.type == null ? \"button\" : props.type;\n\n  const isSelected = index === selectedIndex;\n\n  function onSelect() {\n    onSelectTab(index);\n  }\n\n  useUpdateEffect(() => {\n    if (isSelected && ownRef.current && userInteractedRef.current) {\n      userInteractedRef.current = false;\n      ownRef.current.focus();\n    }\n  }, [isSelected, userInteractedRef]);\n\n  let handleFocus = useEventCallback(\n    wrapEvent(onFocus, () => {\n      setFocusedIndex(index);\n    })\n  );\n\n  let handleBlur = useEventCallback(\n    wrapEvent(onFocus, () => {\n      setFocusedIndex(-1);\n    })\n  );\n\n  return (\n    <Comp\n      // Each element with role `tab` has the property `aria-controls` referring\n      // to its associated `tabpanel` element.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-controls={makeId(tabsId, \"panel\", index)}\n      aria-disabled={disabled}\n      // The active tab element has the state `aria-selected` set to `true` and\n      // all other tab elements have it set to `false`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      aria-selected={isSelected}\n      // Each element that serves as a tab has role `tab` and is contained\n      // within the element with role `tablist`.\n      // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n      role=\"tab\"\n      tabIndex={isSelected ? 0 : -1}\n      {...props}\n      ref={ref}\n      data-reach-tab=\"\"\n      data-orientation={orientation}\n      data-selected={isSelected ? \"\" : undefined}\n      disabled={disabled}\n      id={makeId(tabsId, \"tab\", index)}\n      onClick={onSelect}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      type={htmlType}\n    >\n      {children}\n    </Comp>\n  );\n});\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tab-props\n */\nexport type TabProps = {\n  /**\n   * `Tab` can receive any type of children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tab-children\n   */\n  children?: React.ReactNode;\n  /**\n   * Disables a tab when true. Clicking will not work and keyboard navigation\n   * will skip over it.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tab-disabled\n   */\n  disabled?: boolean;\n  index?: number;\n};\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\";\n  Tab.propTypes = {\n    children: PropTypes.node,\n    disabled: PropTypes.bool,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanels\n *\n * The parent component of the panels.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels\n */\nconst TabPanelsImpl = forwardRefWithAs<TabPanelsProps, \"div\">(\n  function TabPanels({ children, as: Comp = \"div\", ...props }, forwardedRef) {\n    let ownRef = useRef();\n    let ref = useForkedRef(ownRef, forwardedRef);\n    let [tabPanels, setTabPanels] = useDescendantsInit<TabPanelDescendant>();\n\n    return (\n      <DescendantProvider\n        context={TabPanelDescendantsContext}\n        items={tabPanels}\n        set={setTabPanels}\n      >\n        <Comp {...props} ref={ref} data-reach-tab-panels=\"\">\n          {children}\n        </Comp>\n      </DescendantProvider>\n    );\n  }\n);\n\nif (__DEV__) {\n  TabPanelsImpl.displayName = \"TabPanels\";\n  TabPanelsImpl.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\nconst TabPanels = memoWithAs(TabPanelsImpl);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanels-props\n */\nexport type TabPanelsProps = TabListProps & {};\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\";\n}\n\nexport { TabPanels };\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * TabPanel\n *\n * The panel that displays when it's corresponding tab is active.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel\n */\nexport const TabPanel = forwardRefWithAs<TabPanelProps, \"div\">(\n  function TabPanel(\n    { children, \"aria-label\": ariaLabel, as: Comp = \"div\", ...props },\n    forwardedRef\n  ) {\n    let { selectedPanelRef, selectedIndex, id: tabsId } = useContext(\n      TabsContext\n    );\n    let ownRef = useRef<HTMLElement | null>(null);\n\n    let index = useDescendant(\n      { element: ownRef.current! },\n      TabPanelDescendantsContext\n    );\n\n    let id = makeId(tabsId, \"panel\", index);\n\n    // Because useDescendant will always return -1 on the first render,\n    // `isSelected` will briefly be false for all tabs. We set a tab panel's\n    // hidden attribute based `isSelected` being false, meaning that all tabs\n    // are initially hidden. This makes it impossible for consumers to do\n    // certain things, like focus an element inside the active tab panel when\n    // the page loads. So what we can do is track that a panel is \"ready\" to be\n    // hidden once effects are run (descendants work their magic in\n    // useLayoutEffect, so we can set our ref in useEffecct to run later). We\n    // can use a ref instead of state because we're always geting a re-render\n    // anyway thanks to descendants. This is a little more coupled to the\n    // implementation details of descendants than I'd like, but we'll add a test\n    // to (hopefully) catch any regressions.\n    let isSelected = index === selectedIndex;\n    let readyToHide = useRef(false);\n    let hidden = readyToHide.current ? !isSelected : false;\n    React.useEffect(() => {\n      readyToHide.current = true;\n    }, []);\n\n    let ref = useForkedRef(\n      forwardedRef,\n      ownRef,\n      isSelected ? selectedPanelRef : null\n    );\n\n    return (\n      <Comp\n        // Each element with role `tabpanel` has the property `aria-labelledby`\n        // referring to its associated tab element.\n        aria-labelledby={makeId(tabsId, \"tab\", index)}\n        hidden={hidden}\n        // Each element that contains the content panel for a tab has role\n        // `tabpanel`.\n        // https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel\n        role=\"tabpanel\"\n        tabIndex={isSelected ? 0 : -1}\n        {...props}\n        ref={ref}\n        data-reach-tab-panel=\"\"\n        id={id}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel-props\n */\nexport type TabPanelProps = {\n  /**\n   * `TabPanel` can receive any type of children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/tabs#tabpanel-children\n   */\n  children?: React.ReactNode;\n};\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\";\n  TabPanel.propTypes = {\n    as: PropTypes.any,\n    children: PropTypes.node,\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hook that exposes data for a given `Tabs` component to its descendants.\n *\n * @see Docs https://reacttraining.com/reach-ui/tabs#usetabscontext\n */\nexport function useTabsContext(): TabsContextValue {\n  let { focusedIndex, id, selectedIndex } = useContext(TabsContext);\n  return useMemo(\n    () => ({\n      focusedIndex,\n      id,\n      selectedIndex,\n    }),\n    [focusedIndex, id, selectedIndex]\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype TabDescendant = Descendant<HTMLElement> & {\n  disabled: boolean;\n};\n\ntype TabPanelDescendant = Descendant<HTMLElement>;\n\nexport type TabsContextValue = {\n  focusedIndex: number;\n  id: string;\n  selectedIndex: number;\n};\n\ntype InternalTabsContextValue = {\n  focusedIndex: number;\n  id: string;\n  isControlled: boolean;\n  isRTL: React.MutableRefObject<boolean>;\n  keyboardActivation: TabsKeyboardActivation;\n  onFocusPanel: () => void;\n  onSelectTab: (index: number) => void;\n  onSelectTabWithKeyboard: (index: number) => void;\n  orientation: TabsOrientation;\n  selectedIndex: number;\n  selectedPanelRef: React.MutableRefObject<HTMLElement | null>;\n  setFocusedIndex: React.Dispatch<React.SetStateAction<number>>;\n  setSelectedIndex: React.Dispatch<React.SetStateAction<number>>;\n  userInteractedRef: React.MutableRefObject<boolean>;\n};\n"]},"metadata":{},"sourceType":"module"}